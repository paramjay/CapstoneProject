type User {
  id: ID!
  username: String!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String!
  gender: String!
  dob: String!
  role: String!
  address: String
  isActive: Boolean
}

input RegisterUserInput {
  username: String!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phone: String!
  gender: String!
  dob: String!
  role: String!
  address: String
}


type Product {
  id: ID!
  category: String!
  subCategory: String!
  name: String!
  brand: String!
  stock: String!
  size: String!
  price: String!
  salePrice: String!
  description: String
}

input RegisterProductInput {
  category: String!
  subCategory: String!
  name: String!
  brand: String!
  stock: String!
  size: String!
  price: String!
  salePrice: String!
  description: String
}

input EditProductInput {
  category: String!
  subCategory: String!
  name: String!
  brand: String!
  stock: String!
  size: String!
  price: String!
  salePrice: String!
  description: String
}

input LoginInput {
  username: String!
  password: String!
}



type Query {
  getUsers: [User],
  getProducts: [Product],
  getOneProduct(id: String!): Product,
  loginAuth(input: LoginInput!): User,
}

type Mutation {
  registerUser(input: RegisterUserInput!): User,
  registerProduct(input: RegisterProductInput!): Product,
  EditProductInput(id: String!, product: EditProductInput!): String,
  removeUser(id: String!): String
  removeProduct(id: String!): String
  deactivateUser(id: String!): String
}
